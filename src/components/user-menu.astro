---
import { LogOut } from "lucide-react";

import { Button, buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const { auth } = Astro.locals;

const session = await auth.validate();

if (!session) {
  return null;
}

const { avatarUrl, displayName: name } = session.user;

const nameInitials = (() => {
  if (!name?.length) {
    return "--";
  }

  const names = name.split(" ");
  if (names.length > 1) {
    return `${names![0]![0]}${names![1]![0]}`.toUpperCase();
  }

  return names![0]![0]!.toUpperCase();
})();
---

<div class="relative" id="user-menu">
  <Button
    variant="ghost"
    className="relative h-8 w-8 rounded-full overflow-hidden"
    id="user-menu-toggle"
  >
    <div class="absolute inset-0">
      {
        avatarUrl ? (
          <img src={avatarUrl} alt="" class="w-full h-full object-cover" />
        ) : (
          <div class="text-foreground w-full h-full flex items-center justify-center bg-foreground/5">
            {nameInitials}
          </div>
        )
      }
    </div>
  </Button>
  <div
    id="user-menu-closer"
    class="hidden fixed inset-0 [#user-menu.open_&]:block"
  >
  </div>
  <div
    id="user-menu-dropdown"
    role="menu"
    aria-orientation="vertical"
    class="absolute right-0 top-10 p-1 bg-background rounded z-10 shadow space-y-1 hidden [#user-menu.open_&]:block"
  >
    <div>
      <p class="text-sm font-medium leading-none px-4 py-3">{name}</p>
    </div>
    <div
      class="w-full h-px bg-foreground/5"
      role="separator"
      aria-orientation="horizontal"
    >
    </div>
    <div role="group">
      <a
        role="menuitem"
        href="/auth/logout"
        aria-label="Logout"
        class={cn(buttonVariants({ variant: "ghost" }), "w-full justify-start")}
      >
        <LogOut className="w-4 h-4 mr-2" /> Logout
      </a>
    </div>
  </div>
</div>
<script>
  document
    .querySelector('[href="/auth/logout"]')
    ?.addEventListener("click", () => {
      if ("posthog" in window) {
        // @ts-ignore
        window.posthog.reset();
      }
    });
  document
    .getElementById("user-menu-toggle")
    ?.addEventListener("click", (e) => {
      e.stopPropagation();
      e.preventDefault();
      document.getElementById("user-menu")?.classList.toggle("open");
    });

  document
    .getElementById("user-menu-dropdown")
    ?.addEventListener("click", (e) => {
      e.stopPropagation();
    });
  document.getElementById("user-menu-closer")?.addEventListener("click", () => {
    document.getElementById("user-menu")?.classList.remove("open");
  });
</script>
